const fs = require('fs');
const path = require('path');
const child = require('child_process');

const root = path.resolve(__dirname, '..'); // app/ folder
const versionFile = path.join(root, 'src', 'app', 'version.constant.ts');
const buildMetaFile = path.join(root, 'src', 'app', 'build-meta.ts');

function readVersion() {
  const content = fs.readFileSync(versionFile, 'utf8');
  const m = content.match(/export\s+const\s+APP_VERSION\s*=\s*['"]([^'"]+)['"]/);
  return m ? m[1] : '0.0.0';
}

function git(cmd) {
  try {
    return child.execSync(cmd, { cwd: root, encoding: 'utf8' }).trim();
  } catch {
    return null;
  }
}

function writeBuildMeta(version, commitNumber, commitHash, timestamp) {
  const versionString = `${version}.${commitNumber} (${commitHash}) ${timestamp}`;
  const content = `// Auto-generated by scripts/generate-build-meta.js - do not edit
export const APP_VERSION = '${version}';
export const BUILD_COMMIT_NUMBER = ${commitNumber};
export const BUILD_COMMIT_HASH = '${commitHash}';
export const BUILD_TIMESTAMP = '${timestamp}';
export const APP_VERSION_STRING = '${versionString}';
`;
  fs.writeFileSync(buildMetaFile, content, 'utf8');
}

(function main() {
  try {
    const version = readVersion();

    // commit count (number of commits reachable from HEAD)
    const commitNumber = parseInt(git('git rev-list --count HEAD') || '0', 10);

    // short commit hash
    const commitHash = git('git rev-parse --short HEAD') || 'unknown';

    const timestamp = new Date().toISOString();

    writeBuildMeta(version, commitNumber || 0, commitHash, timestamp);
    console.log('Build meta generated:', version, commitNumber, commitHash, timestamp);
  } catch (err) {
    console.error('Failed to generate build meta:', err);
    process.exitCode = 1;
  }
})();